#=
Algorithm 4.1. A function for extracting the statistics, or counts,
from a discrete data set D, assuming a Bayesian network with variables vars and structure G. The
data set is an n × m matrix, where
n is the number of variables and
m is the number of data points. This function returns an array M of length n. The ith component consists of a qi × ri matrix of counts. The sub2ind(siz, x) function returns a linear index into an array
with dimensions specified by siz
given coordinates x. It is used to
identify which parental instantiation is relevant to a particular data
point and variable
=#

function sub2ind(siz, x)
    k = vcat(1, cumprod(siz[1:end-1]))
    return dot(k, x .- 1) + 1
end
function statistics(vars, G, D::Matrix{Int})
    n = size(D, 1)
    r = [vars[i].r for i in 1:n]
    q = [prod([r[j] for j in inneighbors(G,i)]) for i in 1:n]
    M = [zeros(q[i], r[i]) for i in 1:n]
    for o in eachcol(D)
        for i in 1:n
            k = o[i]
            parents = inneighbors(G,i)
            j = 1
            if !isempty(parents)
                j = sub2ind(r[parents], o[parents])
            end
            M[i][j,k] += 1.0
        end
    end
    return M
end


#=
Algorithm 4.2. A function for generating a prior αijk where all entries are 1. The array of matrices that this function returns takes the same form as the statistics generated by algorithm 4.1. To determine the appropriate dimensions, the function takes as input the list of variables vars and structure G
=#
function prior(vars, G)
    n = length(vars)
    r = [vars[i].r for i in 1:n]
    q = [prod([r[j] for j in inneighbors(G,i)]) for i in 1:n]
    return [ones(q[i], r[i]) for i in 1:n]
end

#=
Algorithm 4.3. The method
gaussian_kernel returns a
zero-mean Gaussian kernel φ(x)
with bandwidth b. Kernel density estimation is also implemented for
a kernel ϕ and list of observations
O.
=#

gaussian_kernel(b) = x->pdf(Normal(0,b), x)
function kernel_density_estimate(ϕ, O)
    return x -> sum([ϕ(x - o) for o in O])/length(O)
end